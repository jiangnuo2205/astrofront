---
import AdminLayout from '../../layouts/AdminLayout.astro';
import { getCollection } from 'astro:content';
import fs from 'node:fs';
import path from 'node:path';

// 动态获取新闻数据
const newsEntries = await getCollection('news');
const newsList = newsEntries.map((entry, index) => {
  return {
    id: (newsEntries.length - index).toString(), // 根据获取数量排序的ID
    title: entry.data.title,
    slug: entry.slug,
    date: entry.data.date.toISOString().split('T')[0], // 格式化日期
    status: "已发布"
  };
}).sort((a, b) => new Date(b.date) - new Date(a.date)); // 按日期排序

// 计算总发布内容数量
const totalPublished = newsList.length;
---

<AdminLayout title="控制面板">
  <div class="dashboard-stats">
    <div class="stat-card">
      <h3>发布内容</h3>
      <p class="stat-value">{totalPublished}</p>
    </div>
    <div class="stat-card">
      <h3>草稿</h3>
      <p class="stat-value">0</p>
    </div>
    <div class="stat-card">
      <h3>总访问量</h3>
      <p class="stat-value">1,234</p>
    </div>
  </div>

  <div class="content-section">
    <div class="section-header">
      <h2>内容列表</h2>
      <a href="/admin/edit/new" class="create-button">创建新内容</a>
    </div>

    <table class="content-table">
      <thead>
        <tr>
          <th>ID</th>
          <th>标题</th>
          <th>发布日期</th>
          <th>状态</th>
          <th>操作</th>
        </tr>
      </thead>
      <tbody>
        {newsList.map(news => (
          <tr>
            <td>{news.id}</td>
            <td>{news.title}</td>
            <td>{news.date}</td>
            <td><span class="status-badge">{news.status}</span></td>
            <td class="actions">
              <a href={`/admin/edit/${news.slug}`} class="edit-button">编辑</a>
              <a href={`/news/${news.slug}`} class="view-button">查看</a>
              <button class="delete-button" data-slug={news.slug}>删除</button>
            </td>
          </tr>
        ))}
      </tbody>
    </table>
  </div>
</AdminLayout>

<style>
  .dashboard-stats {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
    gap: 1rem;
    margin-bottom: 2rem;
  }

  .stat-card {
    background-color: #f5f5f5;
    border-radius: 8px;
    padding: 1.5rem;
    text-align: center;
  }

  .stat-card h3 {
    margin-top: 0;
    margin-bottom: 0.5rem;
    font-size: 1rem;
    color: #666;
  }

  .stat-value {
    font-size: 2rem;
    font-weight: bold;
    margin: 0;
  }

  .content-section {
    background-color: white;
    border-radius: 8px;
    padding: 1.5rem;
    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.05);
  }

  .section-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 1.5rem;
  }

  .section-header h2 {
    margin: 0;
  }

  .create-button {
    background-color: #0066cc;
    color: white;
    padding: 0.5rem 1rem;
    border-radius: 4px;
    text-decoration: none;
    font-weight: bold;
  }

  .content-table {
    width: 100%;
    border-collapse: collapse;
  }

  .content-table th,
  .content-table td {
    padding: 0.75rem;
    text-align: left;
    border-bottom: 1px solid #ddd;
  }

  .content-table th {
    background-color: #f5f5f5;
    font-weight: bold;
  }

  .status-badge {
    background-color: #4CAF50;
    color: white;
    padding: 0.25rem 0.5rem;
    border-radius: 4px;
    font-size: 0.875rem;
  }

  .actions {
    display: flex;
    gap: 0.5rem;
  }

  .edit-button,
  .view-button,
  .delete-button {
    padding: 0.25rem 0.5rem;
    border-radius: 4px;
    font-size: 0.875rem;
    cursor: pointer;
  }

  .edit-button {
    background-color: #0066cc;
    color: white;
    text-decoration: none;
  }

  .view-button {
    background-color: #4CAF50;
    color: white;
    text-decoration: none;
  }

  .delete-button {
    background-color: #f44336;
    color: white;
    border: none;
  }
</style>

<script>
  // 检查登录状态
  if (typeof window !== 'undefined') {
    if (sessionStorage.getItem('isLoggedIn') !== 'true') {
      window.location.href = '/admin/login';
    }
  }

  // 删除按钮功能
  const deleteButtons = document.querySelectorAll('.delete-button');
  deleteButtons.forEach(button => {
    button.addEventListener('click', async function() {
      const slug = this.getAttribute('data-slug');
      if (confirm('确定要删除此内容吗？此操作不可撤销。')) {
        try {
          const response = await fetch('/api/delete-news', {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json',
            },
            body: JSON.stringify({ slug }),
          });
          
          if (response.ok) {
            alert('内容已成功删除');
            // 从DOM中移除行
            this.closest('tr').remove();
            // 更新统计数据
            const publishedCount = document.querySelector('.dashboard-stats .stat-card:first-child .stat-value');
            publishedCount.textContent = (parseInt(publishedCount.textContent) - 1).toString();
          } else {
            alert('删除失败：' + await response.text());
          }
        } catch (error) {
          alert('删除时发生错误：' + error.message);
        }
      }
    });
  });
</script>