---
import AdminLayout from '../../../layouts/AdminLayout.astro';
import fs from 'node:fs';
import path from 'node:path';
import { getCollection } from 'astro:content';



// 获取路由参数
const { id } = Astro.params;

// 模拟从数据库获取内容
// 在实际应用中，这里会从数据库或API获取数据

let isNew = true;
let newsItem = {
  id: "",
  date:new Date().toISOString().split('T')[0],
  summary:"",
  title: "",
  slug: "",
  content: "",
  status: "草稿"
};
// 如果不是新建内容，加载现有内容
if (id && id !== 'new') {
  isNew = false;
  try {
    const filePath = path.join(process.cwd(), 'src/content/news', `${id}.md`);
    
    if (fs.existsSync(filePath)) {
      const fileContent = fs.readFileSync(filePath, 'utf-8');
      
      // 解析frontmatter
      const frontmatterMatch = fileContent.match(/^---\n([\s\S]*?)\n---\n([\s\S]*)$/);
      
      if (frontmatterMatch) {
        const frontmatter = frontmatterMatch[1];
        content = frontmatterMatch[2].trim();
        
        // 提取标题
        const titleMatch = frontmatter.match(/title:\s*"([^"]*)"/);
        if (titleMatch) title = titleMatch[1];
        
        // 提取日期
        const dateMatch = frontmatter.match(/date:\s*(\d{4}-\d{2}-\d{2})/);
        if (dateMatch) date = dateMatch[1];
        
        // 提取摘要
        const summaryMatch = frontmatter.match(/summary:\s*"([^"]*)"/);
        if (summaryMatch) summary = summaryMatch[1];
      }
    }
  } catch (error) {
    console.error('加载内容时出错:', error);
  }
}

// 获取下一个可用的ID
const newsEntries = await getCollection('news');
const nextId = (newsEntries.length + 1).toString();





const pageTitle = isNew ? "创建新内容" : "编辑内容";
---

<AdminLayout title={pageTitle}>
  <form id="editForm" class="edit-form">
    <input type="hidden" id="newsId" value={newsItem.id}>
    
    <div class="form-group">
      <label for="title">标题</label>
      <input type="text" id="title" name="title" value={newsItem.title} required>
    </div>
    
    <div class="form-group">
      <label for="slug">URL标识</label>
      <input type="text" id="slug" name="slug" value={newsItem.slug} required>
      <small>用于URL的唯一标识，例如: my-news-title</small>
    </div>
    
      <div class="form-group">
      <label for="summary">简介</label>
      <input type="text" id="summary" name="summary" value={newsItem.summary} required>
    </div>

    <div class="form-group">
      <label for="content">内容</label>
      <textarea id="content" name="content" rows="15" required>{newsItem.content}</textarea>
      <small>支持HTML格式</small>
    </div>
    
    <div class="form-group">
      <label for="status">状态</label>
      <select id="status" name="status">
        <option value="草稿" selected={newsItem.status === "草稿"}>草稿</option>
        <option value="已发布" selected={newsItem.status === "已发布"}>发布</option>
      </select>
    </div>
    
    <div class="form-actions">
      <button type="button" id="previewBtn" class="preview-button">预览</button>
      <button type="submit" class="save-button">保存</button>
      <a href="/admin/dashboard" class="cancel-button">取消</a>
    </div>
  </form>
  
  <div id="previewSection" class="preview-section" style="display: none;">
    <div class="preview-header">
      <h3>预览</h3>
      <button id="closePreviewBtn" class="close-preview-button">关闭预览</button>
    </div>
    <div class="preview-content">
      <h1 id="previewTitle"></h1>
      <div id="previewBody"></div>
    </div>
  </div>
</AdminLayout>

<style>
  .edit-form {
    background-color: white;
    border-radius: 8px;
    padding: 1.5rem;
    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.05);
  }

  .form-group {
    margin-bottom: 1.5rem;
  }

  label {
    display: block;
    margin-bottom: 0.5rem;
    font-weight: bold;
  }

  input, textarea, select {
    width: 100%;
    padding: 0.75rem;
    border: 1px solid #ddd;
    border-radius: 4px;
    font-size: 1rem;
  }

  textarea {
    resize: vertical;
    min-height: 200px;
  }

  small {
    display: block;
    margin-top: 0.25rem;
    color: #666;
    font-size: 0.85rem;
  }

  .form-actions {
    display: flex;
    gap: 1rem;
    margin-top: 2rem;
  }

  .preview-button, .save-button, .cancel-button {
    padding: 0.75rem 1.5rem;
    border-radius: 4px;
    font-size: 1rem;
    cursor: pointer;
  }

  .preview-button {
    background-color: #f5f5f5;
    border: 1px solid #ddd;
  }

  .save-button {
    background-color: #0066cc;
    color: white;
    border: none;
  }

  .cancel-button {
    background-color: #f44336;
    color: white;
    text-decoration: none;
    text-align: center;
  }

  .preview-section {
    margin-top: 2rem;
    background-color: white;
    border-radius: 8px;
    padding: 1.5rem;
    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.05);
  }

  .preview-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 1.5rem;
    padding-bottom: 0.5rem;
    border-bottom: 1px solid #ddd;
  }

  .preview-header h3 {
    margin: 0;
  }

  .close-preview-button {
    background-color: #f5f5f5;
    border: 1px solid #ddd;
    padding: 0.5rem 1rem;
    border-radius: 4px;
    cursor: pointer;
  }

  .preview-content {
    padding: 1rem;
    border: 1px solid #ddd;
    border-radius: 4px;
    background-color: #f9f9f9;
  }
</style>

<script>
  // 检查登录状态
  if (typeof window !== 'undefined') {
    if (sessionStorage.getItem('isLoggedIn') !== 'true') {
      window.location.href = '/admin/login';
    }
  }

  // 自动生成 slug
  const titleInput = document.getElementById('title');
  const slugInput = document.getElementById('slug');
  
  titleInput?.addEventListener('blur', function() {
    if (slugInput.value === '') {
      // 生成 slug：转小写，替换空格为连字符，移除特殊字符
      const slug = this.value.toLowerCase()
        .replace(/\s+/g, '-')
        .replace(/[^\w\-]+/g, '')
        .replace(/\-\-+/g, '-')
        .replace(/^-+/, '')
        .replace(/-+$/, '');
      
      slugInput.value = slug;
    }
  });

  // 预览功能
  const previewBtn = document.getElementById('previewBtn');
  const closePreviewBtn = document.getElementById('closePreviewBtn');
  const previewSection = document.getElementById('previewSection');
  const previewTitle = document.getElementById('previewTitle');
  const previewBody = document.getElementById('previewBody');
  
  previewBtn?.addEventListener('click', function() {
    const title = document.getElementById('title').value;
    const content = document.getElementById('content').value;
    
    previewTitle.textContent = title;
    previewBody.innerHTML = content;
    previewSection.style.display = 'block';
    
    // 滚动到预览区域
    previewSection.scrollIntoView({ behavior: 'smooth' });
  });
  
  closePreviewBtn?.addEventListener('click', function() {
    previewSection.style.display = 'none';
  });

  // 表单提交
  const editForm = document.getElementById('editForm');
  
  editForm?.addEventListener('submit', async function(e) {
    e.preventDefault();
    
    const formData = {
      id: document.getElementById('newsId').value,
      title: document.getElementById('title').value,
      summary: document.getElementById('summary').value,
      slug: document.getElementById('slug').value,
      content: document.getElementById('content').value,
      status: document.getElementById('status').value
    };

     try {
    // 创建今天的日期，格式为 YYYY-MM-DD
    const today = new Date().toISOString().slice(0, 10);
    
    // 构造 Markdown 内容
    const markdownContent = `---
title: "${formData.title}"
summary: "${formData.summary}"
date: ${today}
---
${formData.content}`;

    // 创建文件名
    const fileName = `${formData.title.replace(/\s+/g, '-').toLowerCase()}.md`;
    
    // 准备要发送的数据
    const postData = {
      fileName: fileName,
      content: markdownContent
    };
    
    console.log('发送数据:', postData);
    
    // 发送请求到服务器端点保存文件
    const response = await fetch('/api/save-markdown', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json'
      },
      body: JSON.stringify(postData)
    });
    
    console.log('响应状态:', response.status);
    
    // 检查是否为JSON响应
    const contentType = response.headers.get('content-type');
    if (!contentType || !contentType.includes('application/json')) {
      console.error('响应不是JSON格式:', await response.text());
      alert('服务器响应格式错误');
      return;
    }
    
    const result = await response.json();
    console.log('响应结果:', result);
    
    if (result.success) {
      alert('内容已保存');
      // 重定向到控制面板
      window.location.href = '/admin/dashboard';
    } else {
      alert('保存失败: ' + (result.error || '未知错误'));
    }
  } catch (error) {
    console.error('保存内容时出错:', error);
    alert('保存失败: ' + error.message);
  }
  });
</script>